---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

아래는 실제 개발에 사용할 API 엔드포인트와 각 기능에 따른 상세 구성입니다. 이 설계는 RESTful 원칙에 따라 작성되었으며, JWT(또는 유사 토큰 방식)를 사용한 인증 및 권한 제어를 전제로 합니다.

1. 인증(Authentication) 및 세션 관리
1.1 로그인
메서드: POST


URL: /api/auth/login


설명: 이메일과 비밀번호를 통해 로그인하고, 성공 시 JWT 토큰 및 사용자 정보를 반환합니다.


Request Body:


{
  "email": "user@example.com",
  "password": "password123"
}

Response Body (성공):


{
  "token": "JWT_TOKEN_HERE",
  "user": {
    "id": "UUID",
    "name": "홍길동",
    "email": "user@example.com",
    "role": "admin", // 또는 "user"
    "hourly_rate": 9000.00
  }
}

에러: 401 Unauthorized (잘못된 인증 정보)



1.2 로그아웃
메서드: POST


URL: /api/auth/logout


설명: 클라이언트 측에서 JWT 토큰을 삭제하는 방식(서버에서 토큰 블랙리스트 등을 구현할 수도 있음).



2. 사용자(직원) 관리
(관리자 전용)
2.1 사용자 목록 조회
메서드: GET


URL: /api/users


설명: 전체 직원 목록을 조회합니다.


Query Parameters (선택사항): 검색, 페이지네이션 등 추가 가능


Response Body:


[
  {
    "id": "UUID",
    "name": "홍길동",
    "email": "hong@test.com",
    "hourly_rate": 9000.00,
    "role": "user"
  },
  {
    "id": "UUID",
    "name": "김철수",
    "email": "cs@test.com",
    "hourly_rate": 10000.00,
    "role": "user"
  }
]
2.2 사용자 상세 조회
메서드: GET


URL: /api/users/:id


설명: 특정 직원의 상세 정보를 조회합니다.


2.3 사용자 생성
메서드: POST


URL: /api/users


설명: 새 직원을 등록합니다.


Request Body:


{
  "name": "신규직원",
  "email": "newuser@example.com",
  "password": "initialPassword!",
  "role": "user",
  "hourly_rate": 9500.00
}

Response: 생성된 사용자 정보 반환


2.4 사용자 수정
메서드: PUT


URL: /api/users/:id


설명: 직원의 정보를 수정합니다.


Request Body (수정 가능한 필드):


{
  "name": "수정된 이름",
  "email": "updated@example.com",
  "hourly_rate": 9200.00,
  "role": "user"
}
2.5 사용자 삭제
메서드: DELETE


URL: /api/users/:id


설명: 특정 직원을 삭제합니다.



3. 근무내역(Work Logs) 관리
(관리자 전용, 일반 유저는 자신의 내역만 조회)
3.1 근무내역 목록 조회 (관리자)
메서드: GET


URL: /api/work-logs


설명: 날짜 범위, 특정 직원 필터로 전체 근무내역을 조회합니다.


Query Parameters:


userId (선택사항)


startDate (예: 2025-03-01)


endDate (예: 2025-03-31)


Response Body:


[
  {
    "id": "UUID",
    "user_id": "UUID",
    "work_date": "2025-03-01",
    "start_time": "09:00",
    "end_time": "18:00",
    "work_hours": 8.00,
    "hourly_rate": 9000.00,
    "payment_amount": 72000.00,
    "memo": ""
  },
  ...
]
3.2 근무내역 추가 (관리자)
메서드: POST


URL: /api/work-logs


설명: 새 근무내역을 추가합니다.


Request Body:


{
  "user_id": "UUID",
  "work_date": "2025-03-01",
  "start_time": "09:00",
  "end_time": "18:00",
  "work_hours": 8.00,
  "hourly_rate": 9000.00,
  "payment_amount": 72000.00,
  "memo": ""
}
3.3 근무내역 수정 (관리자)
메서드: PUT


URL: /api/work-logs/:id


설명: 기존 근무내역을 수정합니다.


Request Body: (수정 가능한 항목)


{
  "start_time": "09:30",
  "end_time": "18:00",
  "work_hours": 8.50,
  "hourly_rate": 9000.00,
  "payment_amount": 76500.00,
  "memo": "지각 30분 반영"
}
3.4 근무내역 삭제 (관리자)
메서드: DELETE


URL: /api/work-logs/:id



3.5 나의 근무내역 조회 (일반 유저)
메서드: GET


URL: /api/users/me/work-logs


설명: 현재 로그인한 사용자가 본인의 근무내역만 조회합니다.


Query Parameters:


startDate


endDate


Response: 위 3.1의 형식과 동일 (단, user_id는 현재 사용자의 값)



4. 급여 명세서 및 PDF 생성
(일반 유저용: 본인 명세서 / 관리자용: 전체 조회 가능)
4.1 급여 명세서 조회 (일반 유저)
메서드: GET


URL: /api/users/me/salary-slip


설명: 선택한 월에 대한 일별 근무내역 및 합계 정보를 집계하여 반환합니다.


Query Parameters:


month (예: 2025-03)


Response Body:


{
  "user": {
    "id": "UUID",
    "name": "홍길동",
    "hourly_rate": 9000.00
  },
  "month": "2025-03",
  "details": [
    {
      "date": "2025-03-01",
      "start_time": "09:00",
      "end_time": "18:00",
      "work_hours": 8.00,
      "hourly_rate": 9000.00,
      "daily_payment": 72000.00,
      "memo": ""
    },
    ...
  ],
  "summary": {
    "total_work_days": 20,
    "total_work_hours": 160.00,
    "total_payment": 1440000.00
  }
}
4.2 급여 명세서 PDF 다운로드 (일반 유저)
메서드: GET


URL: /api/users/me/salary-slip/pdf


설명: 선택한 월의 급여 명세서를 PDF 형식으로 생성하여 다운로드합니다.


Query Parameters:


month (예: 2025-03)


Response: Content-Type: application/pdf로 PDF 파일 스트림 반환



5. (옵션) 관리자용 전체 급여 보고서
(관리자가 전체 직원의 급여 명세서를 집계하여 조회할 수 있도록 함)
5.1 전체 급여 보고서 조회 (관리자)
메서드: GET


URL: /api/salary-report


설명: 선택한 월에 대해 전체 직원의 급여 집계 정보를 반환합니다.


Query Parameters:


month (예: 2025-03)


Response Body:


[
  {
    "user": {
      "id": "UUID",
      "name": "홍길동",
      "hourly_rate": 9000.00
    },
    "total_work_days": 20,
    "total_work_hours": 160.00,
    "total_payment": 1440000.00
  },
  {
    "user": {
      "id": "UUID",
      "name": "김철수",
      "hourly_rate": 10000.00
    },
    "total_work_days": 15,
    "total_work_hours": 120.00,
    "total_payment": 1200000.00
  }
]

6. 보안 및 인증 고려사항
모든 API 호출 시 HTTP 헤더에 Authorization: Bearer <JWT_TOKEN>가 포함되어야 합니다.


각 엔드포인트는 사용자의 역할(관리자 vs 일반 유저)을 확인하여 접근 권한을 제어합니다.


데이터 유효성 검증, 에러 처리 및 로깅 등은 미들웨어를 통해 일괄 처리합니다.



이와 같이 API 설계를 확정하면, 프론트엔드 및 백엔드 개발 시 명확한 인터페이스 계약(API contract)을 기반으로 빠르게 개발을 진행할 수 있습니다.

